#!/usr/bin/python

# Improve XML files generated by CellDesigner after a BCML to SBML conversion.
# 
# Example of a command line : 
# $ python improve_cd_file.py ./DC-SIGN_cd.xml


# General
import sys
import os.path
import re

# For XML
#sudo pip install lxml
from lxml import etree
import lxml.html as lxh

def main(argv):
	
	# Open CellDesigner XML file and parse
	cdmlRoot = etree.parse(argv[1]).getroot()
	
	# ElementTree needs a list of nested namespaces
	namespaces = {'sbml': 'http://www.sbml.org/sbml/level2/version4', 'celldesigner': 'http://www.sbml.org/2001/ns/celldesigner'}
	
	#####
	# Adjust CellDesigner parameters
	
	##### Remove unnecessary points automatically created by CellDesigner
	# delete [\w]*<celldesigner:editPoints>.*</celldesigner:editPoints>
	for cdmlEditPoints in cdmlRoot.findall(".//celldesigner:editPoints", namespaces):
		cdmlEditPoints.getparent().remove(cdmlEditPoints)
	
	
	#####
	# Adjust species types
	
	##### Change species representing genes to real type "RNA"
	# - Remove protein element from list
	# 	element <celldesigner:protein id="pr83" name="IL-8" type="GENERIC"/>
	# 	in <celldesigner:listOfProteins>...</celldesigner:listOfProteins>
	# - Add to list of RNA 
	#	<celldesigner:listOfRNAs>
	#		<celldesigner:RNA id="rn1" name="IL-8" type="RNA"/>
	#	</celldesigner:listOfRNAs>
	# - In species, change class from PROTEIN to RNA, and rnaReference add new id (remove <celldesigner:proteinReference>pr83</celldesigner:proteinReference>)
	#  <species metaid="mRNAIL_8" id="mRNAIL_8" name="IL-8" compartment="c4">
	#  ...
	# 	<annotation>
	#		<celldesigner:extension>
	#			<celldesigner:positionToCompartment>inside</celldesigner:positionToCompartment>
	#			<celldesigner:speciesIdentity>
	#				<celldesigner:class>RNA</celldesigner:class>
	#				<celldesigner:rnaReference>rn1</celldesigner:rnaReference>
	#			</celldesigner:speciesIdentity>
	#		</celldesigner:extension>
	#	</annotation>
	#  </species>
	# - Change colour to ff66ff66 in speciesAlias (colour only, shape is managed by CellDesigner)
	# 	<celldesigner:speciesAlias id="sa82" species="mRNAIL_8" compartmentAlias="ca3">
	#		<celldesigner:activity>inactive</celldesigner:activity>
	#		<celldesigner:bounds x="227.0" y="290.0" w="80.0" h="40.0"/>
	#		<celldesigner:font size="9"/>
	#		<celldesigner:view state="usual"/>
	#		<celldesigner:usualView>
	#			<celldesigner:innerPosition x="202.0" y="185.0"/>
	#			<celldesigner:boxSize width="80.0" height="40.0"/>
	#			<celldesigner:singleLine width="1.0"/>
	#			<celldesigner:paint color="ff66ff66" scheme="Color"/>
	#		</celldesigner:usualView>
	#		<celldesigner:briefView>
	#			<celldesigner:innerPosition x="0.0" y="0.0"/>
	#			<celldesigner:boxSize width="80.0" height="60.0"/>
	#			<celldesigner:singleLine width="1.0"/>
	#			<celldesigner:paint color="3fff0000" scheme="Color"/>
	#		</celldesigner:briefView>
	#		<celldesigner:info state="empty" angle="-1.5707963267948966"/>
	#	</celldesigner:speciesAlias>
	countRNA = 1
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
		
		if not cdmlSpecies.get('id').startswith('mRNA'):
			# Only interested in RNA species
			continue
		
		rnaId = cdmlSpecies.get('id')
		#print(rnaId)
		
		# Change class from PROTEIN to RNA
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		cdmlClass.text = "RNA"
		
		# Change reference
		# Delete protein reference
		cdmlProtRef = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
		protId = cdmlProtRef.text
		cdmlRefParent = cdmlProtRef.getparent()
		cdmlRefParent.remove(cdmlProtRef)
		# Add RNA reference
		newCdmlRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'rnaReference'))
		newCdmlRef.text = "rn"+str(countRNA)
		cdmlRefParent.append(newCdmlRef)
		
		# Change default colour of its SpeciesAlias
		cdmlSpeciesAlias = cdmlRoot.find(".//celldesigner:speciesAlias[@species='"+rnaId+"']/celldesigner:usualView/celldesigner:paint", namespaces)
		cdmlSpeciesAlias.set('color', "ff66ff66")
		
		# Remove from list of proteins
		cdmlListProtRef = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protId+"']", namespaces)
		cdmlListProtRef.getparent().remove(cdmlListProtRef)
		
		# Add to list of RNAs
		cdmlListRna = cdmlRoot.find(".//*/celldesigner:listOfRNAs", namespaces)
		newRnaRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'RNA'))
		# id="rn1" name="IL-8" type="RNA"
		newRnaRef.set('id', "rn"+str(countRNA))
		newRnaRef.set('name', cdmlSpecies.attrib.get('name'))
		newRnaRef.set('type', "RNA")
		cdmlListRna.append(newRnaRef)
		
		countRNA+=1
	
	##### Change species representing genes to real type "Gene"
	# - Remove protein element from list
	# 	element <celldesigner:protein id="pr83" name="IL-8" type="GENERIC"/>
	# 	in <celldesigner:listOfProteins>...</celldesigner:listOfProteins>
	# - Add to list of Gene 
	#	<celldesigner:listOfGenes>
	#		<celldesigner:gene id="gn1" name="IL-8" type="GENE"/>
	#	</celldesigner:listOfRNAs>
	# - In species, change class from PROTEIN to RNA, and rnaReference add new id (remove <celldesigner:proteinReference>pr83</celldesigner:proteinReference>)
	#  <species metaid="mRNAIL_8" id="mRNAIL_8" name="IL-8" compartment="c4">
	#  ...
	# 	<annotation>
	#		<celldesigner:extension>
	#			<celldesigner:positionToCompartment>inside</celldesigner:positionToCompartment>
	#			<celldesigner:speciesIdentity>
	#				<celldesigner:class>GENE</celldesigner:class>
	#				<celldesigner:geneReference>gn1</celldesigner:rnaReference>
	#			</celldesigner:speciesIdentity>
	#		</celldesigner:extension>
	#	</annotation>
	#  </species>
	# - Change colour to ff66ff66 in speciesAlias (colour only, shape is managed by CellDesigner)
	# 	<celldesigner:speciesAlias id="sa82" species="geneIL_8" compartmentAlias="ca3">
	#		<celldesigner:usualView>
	#			<celldesigner:paint color="ffffff66" scheme="Color"/>
	#		</celldesigner:usualView>
	#	</celldesigner:speciesAlias>
	countGene = 1
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
		
		if not cdmlSpecies.get('id').startswith('gene'):
			# Only interested in gene species
			continue
		
		geneId = cdmlSpecies.get('id')
		#print(geneId)
		
		# Change class from PROTEIN to GENE
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		cdmlClass.text = "GENE"
		
		# Change reference
		# Delete protein reference
		cdmlProtRef = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
		protId = cdmlProtRef.text
		cdmlRefParent = cdmlProtRef.getparent()
		cdmlRefParent.remove(cdmlProtRef)
		# Add GENE reference
		newCdmlRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'geneReference'))
		newCdmlRef.text = "gn"+str(countGene)
		cdmlRefParent.append(newCdmlRef)
		
		# Change default colour of its SpeciesAlias
		cdmlSpeciesAlias = cdmlRoot.find(".//celldesigner:speciesAlias[@species='"+geneId+"']/celldesigner:usualView/celldesigner:paint", namespaces)
		cdmlSpeciesAlias.set('color', "ffffff66")
		
		# Remove from list of proteins
		cdmlListProtRef = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protId+"']", namespaces)
		cdmlListProtRef.getparent().remove(cdmlListProtRef)
		
		# Add to list of RNAs
		cdmlListGene = cdmlRoot.find(".//*/celldesigner:listOfGenes", namespaces)
		newGeneRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'gene'))
		# id="rn1" name="IL-8" type="GENE"
		newGeneRef.set('id', "gn"+str(countGene))
		newGeneRef.set('name', cdmlSpecies.attrib.get('name'))
		newGeneRef.set('type', "GENE")
		cdmlListGene.append(newGeneRef)
		
		countGene +=1

	##### Change species representing complexes to real type "Complex"
	# - Remove protein element from list
	# 	element <celldesigner:protein id="pr83" name="IL-8" type="GENERIC"/>
	# 	in <celldesigner:listOfProteins>...</celldesigner:listOfProteins>
	# - In species annotation, class is COMPLEX + no reference, just a name
	# 	<celldesigner:speciesIdentity>
	#		<celldesigner:class>COMPLEX</celldesigner:class>
	#		<celldesigner:name>Rho_inactive:</celldesigner:name>
	#	</celldesigner:speciesIdentity>
	# - Instead of being referenced in SpeciesAlias, it is now referenced in ComplexSpeciesAlias
	# 	Old, with SpeciesAlias
	#		<celldesigner:listOfSpeciesAliases>
	#			<celldesigner:speciesAlias id="sa23" species="Rho_inactive" compartmentAlias="ca2">
	#				<celldesigner:activity>inactive</celldesigner:activity>
	#				<celldesigner:bounds x="1518.0" y="1210.0" w="80.0" h="40.0"/>
	#				<celldesigner:font size="9"/>
	#				<celldesigner:view state="usual"/>
	#				<celldesigner:usualView>
	#					<celldesigner:innerPosition x="368.0" y="756.0"/>
	#					<celldesigner:boxSize width="80.0" height="40.0"/>
	#	!				<celldesigner:singleLine width="1.0"/>
	#	!				<celldesigner:paint color="ffccffcc" scheme="Color"/>
	#				</celldesigner:usualView>
	#				<celldesigner:briefView>
	#					<celldesigner:innerPosition x="0.0" y="0.0"/>
	#					<celldesigner:boxSize width="80.0" height="60.0"/>
	#	!				<celldesigner:singleLine width="0.0"/>
	#	!				<celldesigner:paint color="3fff0000" scheme="Color"/>
	#				</celldesigner:briefView>
	#				<celldesigner:info state="empty" angle="-1.5707963267948966"/>
	#			</celldesigner:speciesAlias>
	#	New, with complexSpeciesAlias
	#		<celldesigner:listOfComplexSpeciesAliases>
	#			<celldesigner:complexSpeciesAlias id="sa23" species="Rho_inactive" compartmentAlias="ca2">
	#				<celldesigner:activity>inactive</celldesigner:activity>
	#				<celldesigner:bounds x="1609.0" y="1144.0" w="100.0" h="120.0"/>
	#				<celldesigner:font size="9"/>
	#				<celldesigner:view state="usual"/>
	#	!			<celldesigner:backupSize w="0.0" h="0.0"/>
	#	!			<celldesigner:backupView state="none"/>
	#				<celldesigner:usualView>
	#					<celldesigner:innerPosition x="459.0" y="690.0"/>
	#					<celldesigner:boxSize width="100.0" height="120.0"/>
	#	!				<celldesigner:singleLine width="2.0"/>
	#	!				<celldesigner:paint color="fff7f7f7" scheme="Color"/>
	#				</celldesigner:usualView>
	#				<celldesigner:briefView>
	#					<celldesigner:innerPosition x="0.0" y="0.0"/>
	#					<celldesigner:boxSize width="80.0" height="60.0"/>
	#	!				<celldesigner:singleLine width="2.0"/>
	#	!				<celldesigner:paint color="fff7f7f7" scheme="Color"/>
	#				</celldesigner:briefView>
	#				<celldesigner:info state="empty" angle="-1.5707963267948966"/>
	#			</celldesigner:complexSpeciesAlias>
	#		</celldesigner:listOfComplexSpeciesAliases>
	# - No need to change species reference in reactions if the species id is conserved
	#		<listOfReactants>
	#			<speciesReference metaid="CDMT00037" species="Rho_inactive">
	#				<annotation>
	#					<celldesigner:extension>
	#	!					<celldesigner:alias>sa23</celldesigner:alias>
	#					</celldesigner:extension>
	#				</annotation>
	#			</speciesReference>
	#		</listOfReactants>
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
		
		if not re.match(".*[:].*", cdmlSpecies.attrib.get('name'), flags=0):
			# Only interested in Complex species (have a ':' in their name)
			continue
		
		complexId = cdmlSpecies.get('id')
		#print(cdmlSpecies.get('name'))
		
		## Update species
		# Change species class from PROTEIN to COMPLEX
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		cdmlClass.text = "COMPLEX"
		# Delete protein reference in species
		cdmlProtRef = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
		protId = cdmlProtRef.text
		cdmlRefParent = cdmlProtRef.getparent()
		cdmlRefParent.remove(cdmlProtRef)
		# Replace by name
		newCdmlRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'name'))
		newCdmlRef.text = cdmlSpecies.attrib.get('name')
		cdmlRefParent.append(newCdmlRef)
		
		## Remove from list of proteins
		cdmlListProtRef = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protId+"']", namespaces)
		cdmlListProtRef.getparent().remove(cdmlListProtRef)
		
		## Change location of its SpeciesAlias to the list of ComplexSpeciesAlias
		# Find SpeciesAlias
		cdmlSpeciesAlias = cdmlRoot.find(".//celldesigner:speciesAlias[@species='"+complexId+"']", namespaces)
		# Create new ComplexSpeciesAlias
		newCxSpeciesAlias = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'complexSpeciesAlias'))
		# Copy attributes of SpeciesAlias to ComplexSpeciesAlias
		#  id="sa23" species="Rho_inactive" compartmentAlias="ca2"
		newCxSpeciesAlias.set('id', cdmlSpeciesAlias.attrib.get('id'))
		newCxSpeciesAlias.set('species', cdmlSpeciesAlias.attrib.get('species'))
		newCxSpeciesAlias.set('compartmentAlias', cdmlSpeciesAlias.attrib.get('compartmentAlias'))
		# Move children of SpeciesAlias to ComplexSpeciesAlias
		children = list(cdmlSpeciesAlias)
		for child in children:
			newCxSpeciesAlias.append(child)
		# Modify attributes in children celldesigner:singleLine width="2.0" and celldesigner:paint color="fff7f7f7"
		for singleLine in newCxSpeciesAlias.findall(".//celldesigner:singleLine", namespaces):
			singleLine.set('width', "2.0")
		for paint in newCxSpeciesAlias.findall(".//celldesigner:paint", namespaces):
			paint.set('color', "fff7f7f7")
		# Append new children
		#	<celldesigner:backupSize w="0.0" h="0.0"/>
		#	<celldesigner:backupView state="none"/>
		newBackupSize = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'backupSize'))
		newBackupSize.set('w', "0.0")
		newBackupSize.set('h', "0.0")
		newCxSpeciesAlias.append(newBackupSize)
		newBackupView = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'backupView'))
		newBackupView.set('state', "none")
		newCxSpeciesAlias.append(newBackupView)
		# Append the new ComplexSpeciesAlias to corresponding list
		cdmlListCxSpeciesAlias = cdmlRoot.find(".//celldesigner:listOfComplexSpeciesAliases", namespaces)
		cdmlListCxSpeciesAlias.append(newCxSpeciesAlias)
		# Remove older SpeciesAlias
		cdmlSpeciesAlias.getparent().remove(cdmlSpeciesAlias)
	
	##### Change species representing simple chemicals to real type "SimpleChemical"
	# These species are identified by SBO term 247. They don't have a specific list.
	# - Change colour to ffccff66
	# - Adjust species identity
	#	<celldesigner:speciesIdentity>
	#		<celldesigner:class>SIMPLE_MOLECULE</celldesigner:class>
	#		<celldesigner:name>s212</celldesigner:name>
	#	</celldesigner:speciesIdentity>
	# - Remove from protein list.
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species[@sboTerm='SBO:0000247']"):
		
		chemId = cdmlSpecies.get('id')
		#print(geneId)
		
		# Change default colour of its SpeciesAlias
		cdmlSpeciesAlias = cdmlRoot.find(".//celldesigner:speciesAlias[@species='"+chemId+"']/celldesigner:usualView/celldesigner:paint", namespaces)
		cdmlSpeciesAlias.set('color', "ffccff66")

		## Update species
		# Change species class from PROTEIN to COMPLEX
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		cdmlClass.text = "SIMPLE_MOLECULE"
		# Delete protein reference in species
		cdmlProtRef = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
		protId = cdmlProtRef.text
		cdmlRefParent = cdmlProtRef.getparent()
		cdmlRefParent.remove(cdmlProtRef)
		# Replace by name
		newCdmlRef = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'name'))
		newCdmlRef.text = cdmlSpecies.attrib.get('name')
		cdmlRefParent.append(newCdmlRef)
		
		# Remove from list of proteins
		cdmlListProtRef = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protId+"']", namespaces)
		cdmlListProtRef.getparent().remove(cdmlListProtRef)
	
	
	
	#####
	# Adjust species parameters
	
	##### Adjust species and complex activity
	# - Depending on what is in the species/complex notes, set activity to active/inactive in the corresponding alias
	#	<celldesigner:complexSpeciesAlias id="a435" species="s188" compartmentAlias="ca3">
	#		<celldesigner:activity>active</celldesigner:activity>
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
	
		# Complex or protein ?
		cdmlClassText = cdmlSpecies.find(".//*/celldesigner:class", namespaces).text
		if not cdmlClassText == "COMPLEX" and not cdmlClassText == "PROTEIN":
			continue
		
		# Get its ID
		speciesId = cdmlSpecies.get('id')
		
		# Find activation state in notes "StateVariable:(in)active"
		notesElement = cdmlSpecies.find(".//{http://www.sbml.org/sbml/level2/version4}notes")
		if notesElement is not None:
			# Extract note text
			notesText = "".join([x for x in notesElement.itertext()]).strip()
			# Try to find StateVariable:inactive or StateVariable:active in the notes
			matches = re.search("StateVariable:([i]?[n]?active)", notesText)
			# If we have a match
			if matches:
				#print(speciesId+" "+cdmlClassText+" "+matches.group(1))
				# Find corresponding (complex)speciesAlias
				aliasElement = None
				# If we have a protein
				if cdmlClassText == "PROTEIN":
					aliasElement = cdmlRoot.find(".//celldesigner:speciesAlias[@species='"+speciesId+"']", namespaces)
				# Else (necessarily a complex)
				else:
					aliasElement =  cdmlRoot.find(".//celldesigner:complexSpeciesAlias[@species='"+speciesId+"']", namespaces)
				#Find celldesigner:activity
				activeElement = aliasElement.find(".//celldesigner:activity", namespaces)
				activeElement.text = matches.group(1)
	
	##### Adjust modifications
	# - For proteins only, depending on what is in the species notes, 
	#			<species metaid="KRAS" id="KRAS" name="KRAS" compartment="c3">
	#			<notes>
	#				<html xmlns="http://www.w3.org/1999/xhtml">
	#					<head>
	#						<title/>
	#					</head>
	#					<body>
	#						<p xmlns="http://www.w3.org/1999/xhtml">
	#Organism:Homo sapiens
	#OrganismPart:Pheripheral Blood
	#CellType:Dendritic cells (DC)
	#ProvenIn:Dendritic cells (DC)
	#PMID:17462920
	#MacroModule:Transduction
	#StateVariable:3p
	#StateVariable:P@338
	#StateVariable:P@340
	#StateVariable:P@341
	#EntrezGeneID:HS:3845
	#EntrezGeneID:MM:16653
	#</p>
	#					</body>
	#				</html>
	#			</notes>
	# - Once read, create a modification residue in proteinList
	#	<celldesigner:protein id="pr33" name="KRAS" type="GENERIC">
	#		<celldesigner:listOfModificationResidues>
	#			<celldesigner:modificationResidue angle="3.141592653589793" id="rs1" side="none"/>
	#		</celldesigner:listOfModificationResidues>
	#	</celldesigner:protein>
	# - And add modifications to the species' state
	#			<species metaid="KRAS" id="KRAS" name="KRAS" compartment="c3">
	#			<notes></notes>
	#			<annotation>
	#				<celldesigner:extension>
	#					<celldesigner:positionToCompartment>inside</celldesigner:positionToCompartment>
	#					<celldesigner:speciesIdentity>
	#						<celldesigner:class>PROTEIN</celldesigner:class>
	#						<celldesigner:proteinReference>pr33</celldesigner:proteinReference>
	#						<celldesigner:state>
	#							<celldesigner:listOfModifications>
	#								<celldesigner:modification residue="rs1" state="phosphorylated"/>
	#								<celldesigner:modification residue="rs2" state="phosphorylated"/>
	#								<celldesigner:modification residue="rs3" state="phosphorylated"/>
	#							</celldesigner:listOfModifications>
	#						</celldesigner:state>
	#					</celldesigner:speciesIdentity>
	#				</celldesigner:extension>
	#			</annotation>
	#		</species>
	#
	# Modifs in CellDesigner include:
	# phosphorylated, acetylated, ubiquitinated, methylated, hydroxylated, glycosylated, myristoylated, 
	# palmytoylated, prenylated, protonated, sulfated, don't care (' is &apos;), unknown
	modifsDict = {'P': 'phosphorylated',
					'AC': 'acetylated',
					'UB': 'ubiquitinated' }
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
	
		# Complex or protein ?
		# Cannot do it in the findall() above, because it implies two namespaces?!
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		if cdmlClass is None or cdmlClass.text != 'PROTEIN':
			continue
		#print cdmlSpecies.attrib.get('id')
		
		# Extract the notes
		notesElement = cdmlSpecies.find(".//{http://www.sbml.org/sbml/level2/version4}notes")
		if notesElement is None:
			continue
		
		# Extract note text
		notesText = "".join([x for x in notesElement.itertext()]).strip()
		#print(notesText)
		
		# Create containers for the positions and numbers of modifications
		modifs_pos = list()
		modifs_nb = list()
		
		# Find PTM information in notes "StateVariable:" but not if saying "(in)active" or opened/closed
		# Try to find StateVariable:... in the notes. Matches are returned in the order that they are found in the text.
		for match in re.finditer("StateVariable:([\S@]+)", notesText):
			matchedState = match.group(1)
			
			# Not interested in active/inactive state
			if matchedState.endswith("active"):
				continue

			# Not interested in open state
			if re.match("opened", matchedState) or re.match("closed", matchedState):
				continue
			#print(matchedState)
			
			# Notes similar to P@340 or p@341 or UB@63 (most of cases) or P@TYR15 (dectin2)
			if re.match("[\w]{1,2}@[\w\d]+", matchedState):
				# Store element: (modif, position)
				for matchpos in re.finditer("([\w]{1,2})@([\w\d]+)", matchedState):
					modifs_pos.append((matchpos.group(1).upper(), str(matchpos.group(2))))
			else:
				# Notes similar to 2P or 4p
				if re.match("[\d]{1,2}[\w]+", matchedState):
					# Store element: (modif, number)
					for matchpos in re.finditer("([\d]{1,2})([\w]+)", matchedState):
						modifs_nb.append((matchpos.group(2).upper(), int(matchpos.group(1))))
				# Notes similar to AC, Ac or ac
				else:
					# Store element: (modif, 1)
					modifs_nb.append((matchedState.upper(), 1))
		
		# Check that we indeed got modifications (otherwise it's no use adding supplementary empty elements)
		if len(modifs_nb)==0 and len(modifs_pos)==0:
			continue

		# With the modifications found, create new elements, first in protein element; then in species
		#print(modifs_pos)
		#print(modifs_nb)
		
		# Get the protein reference to modify
		cdmlProtRef = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces).text			
		# Find corresponding protein element
		cdmlProtElmt = cdmlRoot.find(".//*/celldesigner:protein[@id='"+cdmlProtRef+"']", namespaces)
		# Check if it has a list of modifications
		cdmlProtListModifs = cdmlProtElmt.find(".//*/celldesigner:listOfModificationResidues", namespaces)
		# If no list of modifs can be found, add one
		if cdmlProtListModifs is None:
			cdmlProtListModifs = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'listOfModificationResidues'))
			cdmlProtElmt.append(cdmlProtListModifs)
		
		# For species element speciesIdentity
		# Find the 'state' element
		cdmlSpeState = cdmlSpecies.find(".//*/celldesigner:state", namespaces)
		# If none, add one
		if cdmlSpeState is None:
			cdmlSpeState = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'state'))
			cdmlClass.getparent().append(cdmlSpeState)
		# Find the list of modifications
		cdmlSpeListModifs = cdmlSpeState.find(".//*/celldesigner:listOfModifications", namespaces)
		# If no list of modifs can be found, add one
		if cdmlSpeListModifs is None:
			cdmlSpeListModifs = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'listOfModifications'))
			cdmlSpeState.append(cdmlSpeListModifs)
		
		modifIndex = 1
		if len(modifs_nb)!=0:
			# Example: [('P', 2), ('AC', 1)]
			for aModifType in modifs_nb:
			
				modifPosIdx = 0
			
				# Will loop twice for 'P', once for 'AC', etc.
				for aModifNb in range(aModifType[1]):
					# Append to protein
					cdmlProtNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modificationResidue'))
					cdmlProtNewModif.set('angle', str(modifIndex*0.5))
					cdmlProtNewModif.set('id', "rs"+str(modifIndex))
					cdmlProtNewModif.set('side', 'none')
					# Example of content of modifs_pos: [('P', 338), ('P', 340), ('P', 341)]
					# Here, we're looking for the next tuple in modifs_pos such as (aModifType[0], any_number)
					# i.e corresponding to the same modification type as current
					# Then adjust the name of the added modification
					# Increase index to look at the next one during next iteration
					while modifPosIdx < len(modifs_pos):
						if modifs_pos[modifPosIdx][0]==aModifType[0]:
							cdmlProtNewModif.set('name', aModifType[0]+"@"+str(modifs_pos[modifPosIdx][1]))
							modifPosIdx+=1
							break
						modifPosIdx+=1
					# Append element to parent
					cdmlProtListModifs.append(cdmlProtNewModif)
				
					# Append to species
					cdmlSpeNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modification'))
					cdmlSpeNewModif.set('residue', "rs"+str(modifIndex))
					cdmlSpeNewModif.set('state', modifsDict[aModifType[0]])
					# Append element to parent
					cdmlSpeListModifs.append(cdmlSpeNewModif)
				
					# Increase index
					modifIndex+=1
		
		# Case where only the modification position was defined
		# i.e only the [('P', 338), ('P', 340), ('P', 341)] array was filled 
		#  (even if it's not supposed to be, there are cases...)
		else:
			for modifPosIdx in range(len(modifs_pos)):
				# Append to protein
				cdmlProtNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modificationResidue'))
				cdmlProtNewModif.set('angle', str(modifIndex*0.5))
				cdmlProtNewModif.set('id', "rs"+str(modifIndex))
				cdmlProtNewModif.set('side', 'none')
				cdmlProtNewModif.set('name', modifs_pos[modifPosIdx][0]+"@"+str(modifs_pos[modifPosIdx][1]))
				# Append element to parent
				cdmlProtListModifs.append(cdmlProtNewModif)
				
				# Append to species
				cdmlSpeNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modification'))
				cdmlSpeNewModif.set('residue', "rs"+str(modifIndex))
				cdmlSpeNewModif.set('state', modifsDict[modifs_pos[modifPosIdx][0]])
				# Append element to parent
				cdmlSpeListModifs.append(cdmlSpeNewModif)

				# Increase index
				modifIndex+=1
		

	##### Adjust complex elements
	
	
	#####
	# Adjust reactions
	
	##### Adjust transcription reaction to correct reaction type
	# Only interested in transcription reactions, tagged with SBO term 183
	# Just need to adjust reaction type and set it to TRANSCRIPTION
	for cdmlReaction in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}reaction[@sboTerm='SBO:0000183']"):
		
		reacType = cdmlReaction.find(".//celldesigner:reactionType", namespaces)
		reacType.text = "TRANSCRIPTION"

	##### In reactions, adjust modifiers to the correct type using SBO terms
	#   BCML 					SBML 					SBO term
	# - catalysis, 				CATALYSIS, 				SBO:0000013 - catalyst
	# - modulation, 			MODULATION, 			SBO:0000462 - non-essential activator
	# - inhibition, 			INHIBITION, 			SBO:0000020 - inhibitor
	# - stimulation, 			PHYSICAL_STIMULATION, 	SBO:0000459 - stimulator
	# - necessary stimulation, 	TRIGGER, 				SBO:0000461 - essential activator
	# Other CellDesigner types: 
	# - UNKNOWN_CATALYSIS
	# - UNKNOWN_INHIBITION
	# SBO terms are stored in modifierSpeciesReference
	#	<listOfModifiers>
	#		<modifierSpeciesReference metaid="CDMT00127" sboTerm="SBO:0000459" species="STAT1_p_1"> ... </modifierSpeciesReference>
	#		<modifierSpeciesReference metaid="CDMT00128" sboTerm="SBO:0000020" species="LYN_inactive_p"> ... </modifierSpeciesReference>
	#	</listOfModifiers>
	# To modify in
	#	<celldesigner:listOfModification>
	#		<celldesigner:modification type="CATALYSIS" modifiers="STAT1_p_1" aliases="sa42" targetLineIndex="-1,3"> ... </celldesigner:modification>
	#		<celldesigner:modification type="CATALYSIS" modifiers="LYN_inactive_p" aliases="sa13" targetLineIndex="-1,3"> ... </celldesigner:modification>
	#	</celldesigner:listOfModification>
	modifierDict = {'SBO:0000013': 'CATALYSIS', 
					'SBO:0000462': 'MODULATION',
					'SBO:0000020': 'INHIBITION',
					'SBO:0000459': 'PHYSICAL_STIMULATION',
					'SBO:0000461': 'TRIGGER'
					}
	for cdmlReaction in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}reaction"):
		
		for cdmlModifier in cdmlReaction.findall(".//{http://www.sbml.org/sbml/level2/version4}modifierSpeciesReference"):
			# For each reaction, loop through all modifiers
			# adjust corresponding modification
			cdmlModification = cdmlReaction.find(".//celldesigner:modification", namespaces)
			cdmlModification.set('type', modifierDict[cdmlModifier.attrib.get('sboTerm')])
	



	##### Merge duplicated species

	# Find all species representing the same species (same name, different id) but in different states
	# - active/inactive
	# - modifications
	# Change linked species in its SpeciesAlias for each duplicate
	#	<celldesigner:speciesAlias id="sa16" species="SRC_" compartmentAlias="ca2">
	#	<celldesigner:speciesAlias id="sa17" species="SRC_p" compartmentAlias="ca2">
	#
	#	<celldesigner:protein id="pr17" name="SRC" type="GENERIC"/>
	#	<celldesigner:protein id="pr18" name="SRC" type="GENERIC">
	#		<celldesigner:listOfModificationResidues>
	#			<celldesigner:modificationResidue angle="0.5" id="rs1" side="none"/>
	#		</celldesigner:listOfModificationResidues>
	#	</celldesigner:protein>
	#
	#	<species metaid="SRC_" id="SRC_" name="SRC" compartment="c3">...</species>
	#	<species metaid="SRC_p" id="SRC_p" name="SRC" compartment="c3">...</species>
	
	# Build a dictionary with all species (proteins), and counts
	speciesDict = {}
	for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species"):
	
		# Complex or protein ?
		# Cannot do it in the findall() above, because it implies two namespaces?!
		cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
		if cdmlClass is None or cdmlClass.text != 'PROTEIN':
			continue
		# Get name of the species
		currentName = cdmlSpecies.attrib.get('name')
		# Check if it already exists in the dictionary
		if not speciesDict.has_key(currentName):
			speciesDict[currentName] = 0
		# Increment count for that name
		speciesDict[currentName] = speciesDict[currentName]+1
	
	#print(str(speciesDict))

	# Loop through all species+count
	for (spName,spNumber) in speciesDict.iteritems():
		#print(spName+"  "+str(spNumber))
		
		# If we have no duplicated elements, skip
		if spNumber == 1:
			#print("\tOK!")
			continue

		# For all species with more than one count
		# Find reference protein, and count number of modifications
		protDict = {}
		for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species[@name='"+spName+"']"):
		
			# Protein ?
			# Cannot do it in the findall() above, because it implies two namespaces?!
			cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
			if cdmlClass is None or cdmlClass.text != 'PROTEIN':
				continue

			protReference = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
			modifsOfRefProtein = cdmlRoot.findall(".//*/celldesigner:protein[@id='"+protReference.text+"']/*/celldesigner:modificationResidue", namespaces)
			protDict[protReference.text] = len(modifsOfRefProtein)
		
		#print("\tNb of modifications: "+str(protDict))
		maxModifs = max(protDict.values())
		protsWithMaxModifs = [ key for key in protDict.keys() if protDict[key] == maxModifs]
		#print("\tProts with max values: "+str(protsWithMaxModifs))
		
		# Easy cases (and most common, luckily): 
		# - multiple species with no modifications: just take any protein reference (the first one)
		# - only one protein reference had one modification, update all to reference this one
		if maxModifs == 0 or (maxModifs == 1 and len(protsWithMaxModifs) == 1):
		
			protWithMaxModifs = protsWithMaxModifs[0]
			
			# Change all species to point to this protein reference, and delete other protein references
			for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species[@name='"+spName+"']"):
		
				# Protein ?
				# Cannot do it in the findall() above, because it implies two namespaces?!
				cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
				if cdmlClass is None or cdmlClass.text != 'PROTEIN':
					continue
				
				# Get protein reference
				protReference = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
				# Skip this loop if reference is already correct		
				if protReference.text == protWithMaxModifs:
					continue
					
				#print("\tUpdate "+cdmlSpecies.attrib.get('id')+" and delete "+protReference.text)
				
				# Delete old protein reference entity
				cdmlRefProt = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protReference.text+"']", namespaces)
				cdmlRefParent = cdmlRefProt.getparent()
				cdmlRefParent.remove(cdmlRefProt)
				
				# Update reference in species
				protReference.text = protWithMaxModifs
				
			#print("\tOK!")

				
		# More complex case: gather all modifications into one reference protein
		#
 		#			<celldesigner:protein id="pr98" name="NF-kBp65" type="GENERIC">
 		#				<celldesigner:listOfModificationResidues>
 		#					<celldesigner:modificationResidue angle="0.5" id="rs1" side="none" name="P@536"/>
 		#					<celldesigner:modificationResidue angle="1.0" id="rs2" side="none" name="P@276"/>
 		#					<celldesigner:modificationResidue angle="1.5" id="rs3" side="none"/>
 		#				</celldesigner:listOfModificationResidues>
 		#			</celldesigner:protein>
		#	
 		#				<celldesigner:speciesIdentity>
 		#					<celldesigner:class>PROTEIN</celldesigner:class>
 		#					<celldesigner:proteinReference>pr98</celldesigner:proteinReference>
 		#					<celldesigner:state>
 		#						<celldesigner:listOfModifications>
 		#							<celldesigner:modification residue="rs1" state="phosphorylated"/>
 		#							<celldesigner:modification residue="rs2" state="phosphorylated"/>
 		#							<celldesigner:modification residue="rs3" state="acetylated"/>
 		#						</celldesigner:listOfModifications>
 		#					</celldesigner:state>
 		#				</celldesigner:speciesIdentity>
		else:
			
			modifsList = {}
			# Not all modifications will have an associated name. Need to keep track to how many max unnamed modifications there are. 
			maxUnnamedModifs = {}
			
			# Go through all proteins and list all modifications found
			for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species[@name='"+spName+"']"):

				# Protein ?
				# Cannot do it in the findall() above, because it implies two namespaces?!
				cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
				if cdmlClass is None or cdmlClass.text != 'PROTEIN':
					continue
				
				# Get protein reference in species entity
				protReference = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
				# Get list of modifications in species entity
				modifications = cdmlSpecies.findall(".//*/celldesigner:modification", namespaces)
				
				unnamedModifsCount = {}
				
				for modifInSpecies in modifications:
					
					# Get modification in protein entity
					modifInRefProtein = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protReference.text+"']/*/celldesigner:modificationResidue[@id='"+modifInSpecies.attrib.get('residue')+"']", namespaces)
					
					#residue = modifInSpecies.attrib.get('residue')
					state = modifInSpecies.attrib.get('state')
					name = modifInRefProtein.attrib.get('name')
					#print("State: "+state+" name: "+str(name))
					
					# If modification doesn't have a name, add it to the unnamed counter
					if name is None:
						if unnamedModifsCount.has_key(state):
							unnamedModifsCount[state] += 1
						else:
							unnamedModifsCount[state] = 1
					# If it has a name, just list it
					else:
						modifsList[name] = state
					
					#print("Updated unnamedModifsCount: "+str(unnamedModifsCount.items()))
					#print("Updated modifsList: "+str(modifsList.items()))
			
				# Store max count of each unnamed modification type
				for (modifState,modifCount) in unnamedModifsCount.iteritems():
					if not maxUnnamedModifs.has_key(modifState):
						maxUnnamedModifs[modifState] = modifCount
					else:
						if maxUnnamedModifs[modifState] < modifCount:
							maxUnnamedModifs[modifState] = modifCount
			
			# We now have a counter of all unnamed modifications
			maxUnnamedModifs = maxUnnamedModifs.items()
			#print(maxUnnamedModifs)
			# And a list of named ones
			modifsList = modifsList.items()
			#print(modifsList)
			# Now we need to create one protein having all modifications 
			# and change the residue/id of all modifications for the corresponding species
			
			# Total unnamed modifications
			totalCountUnnamedModifs = 0
			for (modifState,counter) in maxUnnamedModifs: totalCountUnnamedModifs+=counter
			
			# Get one protein name, to become our new reference protein
			newRefProtElement = protsWithMaxModifs[0]
			
			# Change the reference protein and residue/id of all modifications for the corresponding species
			# Go through all proteins and list all modifications found
			for cdmlSpecies in cdmlRoot.findall(".//{http://www.sbml.org/sbml/level2/version4}species[@name='"+spName+"']"):

				# Protein ?
				# Cannot do it in the findall() above, because it implies two namespaces?!
				cdmlClass = cdmlSpecies.find(".//*/celldesigner:class", namespaces)
				if cdmlClass is None or cdmlClass.text != 'PROTEIN':
					continue
				
				# Change protein reference in species entity (but remember old value)
				protReference = cdmlSpecies.find(".//*/celldesigner:proteinReference", namespaces)
				# Cannot do the modifications on the fly or the file will be screwed up!

					
				# Get list of modifications in species entity
				modifications = cdmlSpecies.findall(".//*/celldesigner:modification", namespaces)
				
				# Keep track of how many unnamed have been used for each modif type, for each species
				currentUsedModifs = {}
				
				# Only need to change the species as the proteins will be deleted, and it would anyway screw up the references
				for modifInSpecies in modifications:
					
					# Get modification in protein entity
					modifInRefProtein = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protReference.text+"']/*/celldesigner:modificationResidue[@id='"+modifInSpecies.attrib.get('residue')+"']", namespaces)
					
					#residue = modifInSpecies.attrib.get('residue')
					state = modifInSpecies.attrib.get('state')
					name = modifInRefProtein.attrib.get('name')
					
					# Unnamed modif
					if name is None:
						indexUnnamedState = 0
						maxCountUnnamedState = 0
						for (modifState,counter) in maxUnnamedModifs:
							if modifState == state: 
								maxCountUnnamedState = counter
								if currentUsedModifs.has_key(state):
									currentUsedModifs[state] += 1
								else:
									currentUsedModifs[state] = 1
								break
							indexUnnamedState += counter
						modifInSpecies.set('residue', 'rs'+str(indexUnnamedState+currentUsedModifs[state])) 
						#print(protReference.text+" State "+state+", name "+str(name)+", new residue/id: "+'rs'+str(indexUnnamedState+currentUsedModifs[state]))
					else:
						currentPos = 0
						for (aModifName,aModifState) in modifsList:
							currentPos +=1
							if aModifName == name and aModifState == state: 
								break
						modifInSpecies.set('residue', 'rs'+str(totalCountUnnamedModifs+currentPos)) 
						#print(protReference.text+" State "+state+", name "+name+", new residue/id: "+'rs'+str(totalCountUnnamedModifs+currentPos))
				
				# Delete referenced protein if it's not the newly chosen common reference
				if not (protReference.text == newRefProtElement):
					oldRefProtein = cdmlRoot.find(".//*/celldesigner:protein[@id='"+protReference.text+"']", namespaces)
					cdmlRefParent = oldRefProtein.getparent()
					cdmlRefParent.remove(oldRefProtein)
				
				# Finally update reference in species to newly chosen protein
				protReference.text = newRefProtElement
								
			# Update newly chosen protein so that it has all modifications
			newRefProtein = cdmlRoot.find(".//*/celldesigner:protein[@id='"+newRefProtElement+"']", namespaces)
			# Delete old list of modifs
			oldListOfModifs = newRefProtein.find(".//*/celldesigner:listOfModificationResidues", namespaces)
			if oldListOfModifs is not None:
				newRefProtein.remove(oldListOfModifs)
				# Add new list
				newListOfModifs = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'listOfModificationResidues'))
				newRefProtein.append(newListOfModifs)
			
				# Add all modifications to the newly chosen protein
				modifIndex = 1
				# Add unnamed modifications first
				for (modifState,counter) in maxUnnamedModifs:
					# Create new element
					cdmlProtNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modificationResidue'))
					cdmlProtNewModif.set('angle', str(modifIndex*0.5))
					cdmlProtNewModif.set('id', "rs"+str(modifIndex))
					cdmlProtNewModif.set('side', 'none')
					cdmlProtNewModif.set('name', modifs_pos[modifPosIdx][0]+"@"+str(modifs_pos[modifPosIdx][1]))
					# Append element to parent
					cdmlProtListModifs.append(cdmlProtNewModif)
					modifIndex+=1
				
				# Do the same for named modifications, without resetting the index to 0
				for (modifName,state) in modifsList:
					# Create new element
					cdmlProtNewModif = etree.Element('{%s}%s' % (namespaces['celldesigner'], 'modificationResidue'))
					cdmlProtNewModif.set('angle', str(modifIndex*0.5))
					cdmlProtNewModif.set('id', "rs"+str(modifIndex))
					cdmlProtNewModif.set('side', 'none')
					cdmlProtNewModif.set('name', modifName)
					# Append element to parent
					cdmlProtListModifs.append(cdmlProtNewModif)
					modifIndex+=1

				
	
	
	##### Print modified XML in file
	
	# Print SBML in file
	outputdir = os.path.join(os.path.abspath(os.path.join(os.path.dirname(argv[1]), os.pardir)), "modified_CDML")
	if not os.path.exists(outputdir):
		os.makedirs(outputdir)
	outputfile = os.path.join(outputdir, os.path.basename(argv[1]))
	etree.ElementTree(cdmlRoot).write(outputfile, pretty_print=True, xml_declaration=True, encoding='utf-8')
	

if __name__ == "__main__":
	main(sys.argv)
